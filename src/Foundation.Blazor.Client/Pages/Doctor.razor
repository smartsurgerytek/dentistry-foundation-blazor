@page "/Doctor"


@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inherits FoundationComponentBase

<h3>@L["Doctors"]</h3>

<SfGrid DataSource="@Doctors" @ref="DoctorGrid" AllowPaging="true" AllowSorting="true" Toolbar=@ToolbarItems>
    <GridEvents OnToolbarClick="OnToolbarClick" TValue="DoctorDto"></GridEvents>
    <GridColumns>
        <GridColumn Field="Id" HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
        <GridColumn Field="Name" HeaderText="Doctor" Width="200"></GridColumn>
        <GridColumn Field="Specialty" HeaderText="Specialty" Width="200"></GridColumn>
        <GridColumn HeaderText="Manage Patient" Width="120">
            <Template>
                @{
                    var Patient = (context as DoctorDto);                    
                }
                <button class="e-btn" @onclick="@(() => NavigatePatient(Patient))">Patient</button>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="400px" ShowCloseIcon="true" Header="@DialogTitle" Visible="false">
    <DialogTemplates>
        <Content>
            <EditForm Model="@CurrentDoctor" OnValidSubmit="SaveDoctor" @ref="DoctorForm">
                <DataAnnotationsValidator />
                

                <div class="mb-3">
                    <label class="form-label">
                        Doctor <span style="color: red">*</span>
                    </label>
                    <SfTextBox TValue="string" Value="@CurrentDoctor.Name"
                               ValueChanged="@((string value) => CurrentDoctor.Name = value)"
                               Placeholder="Enter Doctor Name" FloatLabelType="FloatLabelType.Auto">
                    </SfTextBox>
                    <ValidationMessage style="color: red" For="@(() => CurrentDoctor.Name)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">
                        Specilty <span style="color: red">*</span>
                    </label>
                    <SfTextBox TValue="string" Value="@CurrentDoctor.Specialty"
                               ValueChanged="@((string value) => CurrentDoctor.Specialty = value)"
                               Placeholder="Enter Specialty" FloatLabelType="FloatLabelType.Auto">
                    </SfTextBox>
                    <ValidationMessage style="color: red" For="@(() => CurrentDoctor.Specialty)" />
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Save" IsPrimary="true" OnClick="SubmitForm"></DialogButton>
        <DialogButton Content="Cancel" OnClick="CloseDialog"></DialogButton>
    </DialogButtons>
</SfDialog>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string DepartmentId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string DepartmentName { get; set; }

    private SfGrid<DoctorDto> DoctorGrid;
    private SfDialog Dialog;
    private EditForm DoctorForm;
    private List<DoctorDto> Doctors = new();
    private CreateUpdateDoctorDto CurrentDoctor = new();
    private string DialogTitle = "";
    private bool IsNew = true;
    private List<ItemModel> ToolbarItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctors();
        ToolbarItems.Add(new ItemModel() { TabIndex = 0, Text = L["Add"], TooltipText = "Add", PrefixIcon = "e-add" });
        ToolbarItems.Add(new ItemModel() {TabIndex = 1, Text = L["Edit"], TooltipText = "Edit", PrefixIcon = "e-edit" });
        ToolbarItems.Add(new ItemModel() {TabIndex = 2, Text = L["Delete"], TooltipText = "Delete", PrefixIcon = "e-delete" });
        ToolbarItems.Add(new ItemModel() {TabIndex = 3, Text = L["Refresh"], TooltipText = L["Refresh"], PrefixIcon = "e-refresh" });
    }

    private async Task LoadDoctors()
    {
        if (!string.IsNullOrEmpty(DepartmentId))
        {
            Doctors = await HttpClientFactory.CreateClient("ApiClient").GetFromJsonAsync<List<DoctorDto>>(
                $"/api/app/doctor/doctors-by/{DepartmentId}"
            ) ?? new();
        }
    }

    private async Task OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var selectedRow = await DoctorGrid.GetSelectedRecordsAsync();

        if (args.Item.TabIndex == 0)
        {
            IsNew = true;
            DialogTitle = "Add Doctor";
            CurrentDoctor = new CreateUpdateDoctorDto { DepartmentId = Guid.Parse(DepartmentId) };
            await Dialog.ShowAsync();
        }
        else if (args.Item.TabIndex == 1 && selectedRow.Any())
        {
            IsNew = false;
            DialogTitle = "Edit Doctor";
            var selected = selectedRow.First();
            CurrentDoctor = new CreateUpdateDoctorDto
            {
                Id = selected.Id,
                Name = selected.Name,
                Specialty = selected.Specialty,
                DepartmentId = selected.DepartmentId
            };
            await Dialog.ShowAsync();
        }
        else if (args.Item.TabIndex == 2 && selectedRow.Any())
        {
            await DeleteDoctor(selectedRow.First().Id);
        }
        else if (args.Item.TabIndex == 3)
        {
            await LoadDoctors();
        }
    }

    private async Task SubmitForm()
    {
        if (DoctorForm.EditContext.Validate())
        {
            await SaveDoctor();
        }
    }

    private async Task SaveDoctor()
    {
        if (IsNew)
        {
            await HttpClientFactory.CreateClient("ApiClient").PostAsJsonAsync("/api/app/doctor/doctor", CurrentDoctor);
        }
        else
        {
            await HttpClientFactory.CreateClient("ApiClient").PutAsJsonAsync($"/api/app/doctor/doctor/{CurrentDoctor.Id}", CurrentDoctor);
        }

        await LoadDoctors();
        await Dialog.HideAsync();
    }

    private async Task DeleteDoctor(Guid id)
    {
        await HttpClientFactory.CreateClient("ApiClient").DeleteAsync($"/api/app/doctor/doctor/{id}");
        await LoadDoctors();
    }

    private async Task CloseDialog()
    {
        await Dialog.HideAsync();
    }

    private void NavigatePatient(DoctorDto doctorDto)
    {
        NavigationManager.NavigateTo($"Patient?DoctorId=" + doctorDto.Id);
    }
}
