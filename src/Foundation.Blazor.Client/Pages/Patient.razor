@page "/Patient"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3 class="text-xl font-semibold mb-4">Patients</h3>

<SfGrid DataSource="@Patients" @ref="PatientGrid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems">
    <GridEvents OnToolbarClick="OnToolbarClick" TValue="PatientDto"></GridEvents>
    <GridColumns>
        <GridColumn Field="Id" HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
        <GridColumn Field="Name" HeaderText="Patient Name" Width="250"></GridColumn>
        <GridColumn Field="DateOfBirth" HeaderText="Date of Birth" Width="250"></GridColumn>
        <GridColumn Field="PatientNumber" HeaderText="Patient Id" Width="250"></GridColumn>
        <GridColumn HeaderText="Manage Records" Width="250">
            <Template>
                @{
                    var patient = (context as PatientDto);
                }
                <button class="e-btn" @onclick="() => NavigateRecord(patient)">Records</button>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="400px" ShowCloseIcon="true" Header="@DialogTitle" Visible="false">
    <DialogTemplates>
        <Content>
            <EditForm Model="@CurrentPatient" OnValidSubmit="HandleValidSubmit" @ref="EditFormRef">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label class="form-label">Patient Id<span class="text-red-500">*</span></label>
                    <SfTextBox TValue="string"
                               Placeholder="Enter Patient Id"
                               FloatLabelType="FloatLabelType.Auto"
                               @bind-Value="CurrentPatient.PatientNumber" />
                    <ValidationMessage For="@(() => CurrentPatient.PatientNumber)" class="text-red-500" />
                </div>

                <div class="form-group">
                    <label class="form-label">Patient Name<span class="text-red-500">*</span></label>
                    <SfTextBox TValue="string"
                               Placeholder="Enter Patient Name"
                               FloatLabelType="FloatLabelType.Auto"
                               @bind-Value="CurrentPatient.Name" />
                    <ValidationMessage For="@(() => CurrentPatient.Name)" class="text-red-500" />
                </div>

                <div class="form-group">
                    <label class="form-label">Date of Birth</label>
                    <SfDatePicker TValue="DateTime?"
                                  Placeholder="Select Date of Birth"
                                  FloatLabelType="FloatLabelType.Auto"
                                  @bind-Value="SelectedDate" />
                    <ValidationMessage For="@(() => CurrentPatient.DateOfBirth)" class="text-red-500" />
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>

    <DialogButtons>
        <DialogButton Content="Save" IsPrimary="true" OnClick="TriggerFormSubmit"></DialogButton>
        <DialogButton Content="Cancel" OnClick="CloseDialog"></DialogButton>
    </DialogButtons>
</SfDialog>

@code {
    private SfGrid<PatientDto> PatientGrid;
    private SfDialog Dialog;
    private EditForm EditFormRef;
    private List<PatientDto> Patients = new();
    private CreateUpdatePatientDto CurrentPatient = new();
    private string DialogTitle = string.Empty;
    private bool IsNew = true;
    private List<ItemModel> ToolbarItems = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string DoctorId { get; set; }

    private DateTime? SelectedDate
    {
        get => CurrentPatient.DateOfBirth == default
            ? DateTime.Today
            : CurrentPatient.DateOfBirth.ToDateTime(TimeOnly.MinValue);

        set => CurrentPatient.DateOfBirth = value.HasValue
            ? DateOnly.FromDateTime(value.Value)
            : default;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPatients();

        ToolbarItems.AddRange(new[]
        {
            new ItemModel() { Text = "Add", TooltipText = "Add", PrefixIcon = "e-add" },
            new ItemModel() { Text = "Edit", TooltipText = "Edit", PrefixIcon = "e-edit" },
            new ItemModel() { Text = "Delete", TooltipText = "Delete", PrefixIcon = "e-delete" },
            new ItemModel() { Text = "Refresh", TooltipText = "Refresh", PrefixIcon = "e-refresh" }
        });
    }

    private async Task LoadPatients()
    {
        if (!string.IsNullOrEmpty(DoctorId))
        {
            Patients = await HttpClientFactory.CreateClient("ApiClient")
                .GetFromJsonAsync<List<PatientDto>>($"/api/app/patient/patient-by/{DoctorId}") ?? new();
        }
    }

    private async Task OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var selectedRow = await PatientGrid.GetSelectedRecordsAsync();

        switch (args.Item.Text)
        {
            case "Add":
                IsNew = true;
                DialogTitle = "Add Patient";
                CurrentPatient = new CreateUpdatePatientDto
                    {
                        DoctorId = Guid.Parse(DoctorId),
                        DateOfBirth = DateOnly.FromDateTime(DateTime.Today)
                    };
                await Dialog.ShowAsync();
                break;

            case "Edit" when selectedRow.Any():
                IsNew = false;
                DialogTitle = "Edit Patient";
                var selected = selectedRow.First();
                CurrentPatient = new CreateUpdatePatientDto
                    {
                        Id = selected.Id,
                        Name = selected.Name,
                        DateOfBirth = selected.DateOfBirth,
                        PatientNumber = selected.PatientNumber,
                        DoctorId = selected.DoctorId
                    };
                await Dialog.ShowAsync();
                break;

            case "Delete" when selectedRow.Any():
                await DeletePatient(selectedRow.First().Id);
                break;

            case "Refresh":
                await LoadPatients();
                break;
        }
    }

    private async Task TriggerFormSubmit()
    {
        if (EditFormRef?.EditContext != null && EditFormRef.EditContext.Validate())
        {
            await HandleValidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");

            if (IsNew)
            {
                await client.PostAsJsonAsync("/api/app/patient/patient", CurrentPatient);
            }
            else
            {
                await client.PutAsJsonAsync($"/api/app/patient/patient/{CurrentPatient.Id}", CurrentPatient);
            }

            await LoadPatients();
            await Dialog.HideAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving patient: {ex.Message}");
        }
    }

    private async Task DeletePatient(Guid id)
    {
        await HttpClientFactory.CreateClient("ApiClient")
            .DeleteAsync($"/api/app/patient/patient/{id}");
        await LoadPatients();
    }

    private async Task CloseDialog()
    {
        await Dialog.HideAsync();
    }

    private void NavigateRecord(PatientDto patientDto)
    {
        NavigationManager.NavigateTo($"ExaminationRecord?PatientId={patientDto.Id}");
    }
}
