@page "/ExaminationRecord"

@inject ISessionStorageService SessionStorage
@inject IHttpClientFactory HttpClientFactory
@using Blazored.SessionStorage
@inject NavigationManager NavigationManager
@using Foundation.Dtos
@using Foundation.Services
@using Newtonsoft.Json
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text;
@using System.Text.Json;
@using System.IO
@inherits FoundationComponentBase




<h3>@L["ExaminationRecord"]</h3>
<hr />
<SfSpinner @ref="spinnerObj" CssClass="custom-spinner"></SfSpinner>
<div class="jaw-selection mb-3">
    <label>
        <input type="radio" name="jaw" value="Upper left" @onchange="@(() => SelectedJaw = "Upper left")" checked="@IsUpperLeftSelected" />
        @L["Upperleft"]
    </label>
    <label>
        <input type="radio" name="jaw" value="Upper right" @onchange="@(() => SelectedJaw = "Upper right")" checked="@IsUpperRightSelected" />
        @L["Upperright"]
    </label>
    <label>
        <input type="radio" name="jaw" value="Lower left" @onchange="@(() => SelectedJaw = "Lower left")" checked="@IsLowerLeftSelected" />
        @L["Lowerleft"]
    </label>
    <label>
        <input type="radio" name="jaw" value="Lower right" @onchange="@(() => SelectedJaw = "Lower right")" checked="@IsLowerRightSelected" />
        @L["Lowertright"]
    </label>
</div>
<hr />

@if (SelectedJaw == "Upper left")
{
    @foreach (var tooth in UpperLeft)
    {
        <div class="tooth-row">
            <div class="tooth-col">
                <img src="/images/tooth.png" alt="ToothIcon" class="tooth-icon" />
                <div class="tooth-number">@tooth.ToothNumber</div>
            </div>

            <div class="caries-section">
                <label class="me-2">  @L["Caries"] </label>
                <label class="me-1">@L["YES"]  <SfCheckBox @bind-Checked="@tooth.CariesYes" /></label>
                <label>@L["NO"] <SfCheckBox @bind-Checked="@tooth.CariesNo" /></label>
            </div>

            <div class="dropdown-section">
                <label>@L["PE"] </label>
                <SfDropDownList TItem="PEList" TValue="string" Placeholder="Select Stage" DataSource="@LocalData" @bind-Value="@tooth.SelectedPE">
                    <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>

            <div class="description-section">
                <SfTextArea @bind-Value="@tooth.Description" Width="500px" Placeholder=@L["DetailedDescription"] CssClass="custom-description" Rows="3" />
            </div>
        </div>
        <hr />
    }
}
else if (SelectedJaw == "Upper right")
{
    @foreach (var tooth in UpperRight)
    {
        <div class="tooth-row">
            <div class="tooth-col">
                <img src="/images/tooth.png" alt="ToothIcon" class="tooth-icon" />
                <div class="tooth-number">@tooth.ToothNumber</div>
            </div>

            <div class="caries-section">
                <label class="me-2">@L["Caries"]</label>
                <label class="me-1">@L["YES"] <SfCheckBox @bind-Checked="@tooth.CariesYes" /></label>
                <label>@L["NO"] <SfCheckBox @bind-Checked="@tooth.CariesNo" /></label>
            </div>

            <div class="dropdown-section">
                <label>@L["PE"]</label>
                <SfDropDownList TItem="PEList" TValue="string" Placeholder="Select Stage" DataSource="@LocalData" @bind-Value="@tooth.SelectedPE">
                    <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>

            <div class="description-section">
                <SfTextArea @bind-Value="@tooth.Description" Width="500px" Placeholder=@L["DetailedDescription"] CssClass="custom-description" Rows="3" />
            </div>
        </div>
        <hr />
    }
}
else if (SelectedJaw == "Lower left")
{
    @foreach (var tooth in LowerLeft)
    {
        <div class="tooth-row">
            <div class="tooth-col">
                <img src="/images/tooth.png" alt="ToothIcon" class="tooth-icon" />
                <div class="tooth-number">@tooth.ToothNumber</div>
            </div>

            <div class="caries-section">
                <label class="me-2">@L["Caries"]</label>
                <label class="me-1">@L["YES"] <SfCheckBox @bind-Checked="@tooth.CariesYes" /></label>
                <label>@L["NO"] <SfCheckBox @bind-Checked="@tooth.CariesNo" /></label>
            </div>

            <div class="dropdown-section">
                <label>@L["PE"]</label>
                <SfDropDownList TItem="PEList" TValue="string" Placeholder="Select Stage" DataSource="@LocalData" @bind-Value="@tooth.SelectedPE">
                    <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>

            <div class="description-section">
                <SfTextArea @bind-Value="@tooth.Description" Width="500px" Placeholder=@L["DetailedDescription"] CssClass="custom-description" Rows="3" />
            </div>
        </div>
        <hr />
    }
}
else if (SelectedJaw == "Lower right")
{
    @foreach (var tooth in LowerRight)
    {
        <div class="tooth-row">
            <div class="tooth-col">
                <img src="/images/tooth.png" alt="ToothIcon" class="tooth-icon" />
                <div class="tooth-number">@tooth.ToothNumber</div>
            </div>

            <div class="caries-section">
                <label class="me-2"> @L["Caries"]</label>
                <label class="me-1">@L["YES"] <SfCheckBox @bind-Checked="@tooth.CariesYes" /></label>
                <label>@L["NO"] <SfCheckBox @bind-Checked="@tooth.CariesNo" /></label>
            </div>

            <div class="dropdown-section">
                <label>@L["PE"]</label>
                <SfDropDownList TItem="PEList" TValue="string" Placeholder="Select Stage" DataSource="@LocalData" @bind-Value="@tooth.SelectedPE">
                    <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>

            <div class="description-section">
                <SfTextArea @bind-Value="@tooth.Description" Width="500px" Placeholder=@L["DetailedDescription"] CssClass="custom-description" Rows="3" />
            </div>
        </div>
        <hr />
    }
}


<div class="text-center mt-4">
    <SfButton CssClass="e-primary" OnClick="SubmitRecord">@L["SubmitRecord"]</SfButton>
</div>

@code {

    

    [Parameter]
    [SupplyParameterFromQuery]
    public string PatientId { get; set; }

    @* [Parameter]
    [SupplyParameterFromQuery]
    public string imagePath { get; set; } *@

    [Parameter]
    [SupplyParameterFromQuery]
    public string imageNames { get; set; }


    public SfSpinner spinnerObj;
    private string SelectedJaw { get; set; } = "Upper left";
    private bool IsUpperLeftSelected => SelectedJaw == "Upper left";
    private bool IsUpperRightSelected => SelectedJaw == "Upper right";
    private bool IsLowerLeftSelected => SelectedJaw == "Lower left";
    private bool IsLowerRightSelected => SelectedJaw == "Lower right";

    private SfCheckBox<bool> CheckboxObj;
    private bool Visibility { get; set; } = true;
    private bool ShowButton { get; set; } = false;

    private string DoctorName { get; set; }
    private string PatientName { get; set; }
    private DateOnly PatientDob { get; set; }

    public class PEList
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    

    List<PEList> LocalData = new()
    {
        new PEList() { ID = "0", Text = "Stage 0"},
        new PEList() { ID = "I", Text = "Stage I" },
        new PEList() { ID = "II", Text = "Stage II" },
        new PEList() { ID = "III", Text = "Stage III" }
    };

    List<ToothInfoDto> UpperRight = new()
    {
        new ToothInfoDto { ToothNumber = 18 }, new ToothInfoDto { ToothNumber = 17 },
        new ToothInfoDto { ToothNumber = 16 }, new ToothInfoDto { ToothNumber = 15 },
        new ToothInfoDto { ToothNumber = 14 }, new ToothInfoDto { ToothNumber = 13 },
        new ToothInfoDto { ToothNumber = 12 }, new ToothInfoDto { ToothNumber = 11 }
    };
    List<ToothInfoDto> UpperLeft = new()
    {
        new ToothInfoDto { ToothNumber = 21 }, new ToothInfoDto { ToothNumber = 22 },
        new ToothInfoDto { ToothNumber = 23 }, new ToothInfoDto { ToothNumber = 24 },
        new ToothInfoDto { ToothNumber = 25 }, new ToothInfoDto { ToothNumber = 26 },
        new ToothInfoDto { ToothNumber = 27 }, new ToothInfoDto { ToothNumber = 28 }
    };
    List<ToothInfoDto> LowerRight = new()
    {
        new ToothInfoDto { ToothNumber = 48 }, new ToothInfoDto { ToothNumber = 47 },
        new ToothInfoDto { ToothNumber = 46 }, new ToothInfoDto { ToothNumber = 45 },
        new ToothInfoDto { ToothNumber = 44 }, new ToothInfoDto { ToothNumber = 43 },
        new ToothInfoDto { ToothNumber = 42 }, new ToothInfoDto { ToothNumber = 41 }
    };
    List<ToothInfoDto> LowerLeft = new()
    {
         new ToothInfoDto { ToothNumber = 31 }, new ToothInfoDto { ToothNumber = 32 },
        new ToothInfoDto { ToothNumber = 33 }, new ToothInfoDto { ToothNumber = 34 },
        new ToothInfoDto { ToothNumber = 35 }, new ToothInfoDto { ToothNumber = 36 },
        new ToothInfoDto { ToothNumber = 37 }, new ToothInfoDto { ToothNumber = 38 }
    };

    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    private void OnCariesChanged(ToothInfoDto tooth, bool isYes)
    {
        tooth.CariesYes = isYes;
        tooth.CariesNo = !isYes;
    }
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PatientId))
        {
            var returnData = await HttpClientFactory.CreateClient("ApiClient").GetFromJsonAsync<PatientRecordDto>($"/api/app/patient/patient-record-by/{PatientId}");

            if (returnData != null)
            {
                DoctorName = returnData.DoctorName;
                PatientName = returnData.PatientName;
                PatientDob = returnData.PatientDob;
            }
        }
        else
        {
            @* var responseMessage = await Http.GetAsync($"/api/FileProvider/OriginalImageDownload?path={imagePath}&name={imageName}");
            var fileStreamResult = await responseMessage.Content.ReadAsStreamAsync();
            string base64Image;
            using (var memoryStream = new MemoryStream())
            {
                fileStreamResult.CopyTo(memoryStream);
                byte[] fileBytes = memoryStream.ToArray();
                base64Image = Convert.ToBase64String(fileBytes);
            }
            var imagePaPanoRequest = new SegmentationApiRequestDto
                {
                    Image = base64Image
                };
            var paPanoResponse = await HttpClientFactory.CreateClient("ApiClient").PostAsJsonAsync("/api/app/dentistry-api/pa-pano-classification", imagePaPanoRequest);
            var paPanoResponseMessage = await paPanoResponse.Content.ReadFromJsonAsync<PaPanoClassificationResponseDto>();
            var isPeriapicalImage = paPanoResponseMessage?.Predicted_Class?.Contains("periapical", StringComparison.OrdinalIgnoreCase) ?? false;

            string fdiData = "";
            if (!isPeriapicalImage)
            {
                var imageRequest = new SegmentationApiRequestDto { Image = base64Image };
                var fdiDataResponse = await HttpClientFactory.CreateClient("ApiClient").PostAsJsonAsync($"/api/app/dentistry-api/pano-fdi-segmentation-cvat", new SegmentationApiRequestDtoWrapper { IsPeriapicalImage = isPeriapicalImage, SegmentationApiRequest = imageRequest });
                fdiData = await fdiDataResponse.Content.ReadAsStringAsync();
            } *@

            @* Console.WriteLine("======= Fdi Data =======");
            Console.WriteLine(fdiData); *@
            // pass the fdi data to examination record form
        }
    }
    private async Task SubmitRecord()
    {
        spinnerObj.ShowAsync();

        var record = new PatientExaminationRecordDto
            {
                LowerLeft = LowerLeft,
                LowerRight = LowerRight,
                UpperLeft = UpperLeft,
                UpperRight = UpperRight,
                PatientId = PatientId,
                DoctorName = DoctorName,
                PatientName = PatientName,
                PatientDob = PatientDob,
                FileBaseAddress = Http.BaseAddress.ToString(),
                DefaultFileBytes = await HttpClient.GetByteArrayAsync("/FileData/WordDefaultFile.docx"),
                DefaultJawImageBytes = await HttpClient.GetByteArrayAsync("/FileData/withnum.jpg"),
            };
        record.ImageNames = imageNames;
        var response = await HttpClientFactory.CreateClient("ApiClient").PostAsJsonAsync("/api/app/Examination", record);
        var fNmae = await response.Content.ReadAsStringAsync();
        NavigationManager.NavigateTo($"WordProcessor?fNmae={Uri.EscapeDataString(fNmae)}&PatientId={PatientId}&imageNames={imageNames}");
        spinnerObj.HideAsync();
    }
    private void DialogOpen(Object args)
    {
        this.ShowButton = false;
    }
    private void DialogClose(Object args)
    {
        this.ShowButton = true;
    }
    private void OnButtonClick()
    {
        this.Visibility = true;
    }
    private void DialogButtonClick()
    {
        this.Visibility = false;
    }
    private void OverlayClick(OverlayModalClickEventArgs args)
    {
        if ((bool)this.CheckboxObj.Checked)
        {
            this.Visibility = false;
        }
        else
        {
            this.Visibility = true;
        }
    }
}


<style>
    #target {
        max-height: 800px;
        height: 100%;
    }

    .tooth-row {
        display: flex;
        align-items: flex-start;
        margin-bottom: 1rem;
        gap: 1rem;
    }

    .tooth-col {
        text-align: center;
        min-width: 50px;
    }

    .tooth-icon {
        width: 30px;
        height: auto;
        margin-bottom: 4px;
    }

    .tooth-number {
        font-weight: bold;
    }

    .caries-section {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        min-width: 150px;
    }

    .dropdown-section {
        min-width: 120px;
    }

    .description-section {
        flex: 1;
    }

    .custom-description {
        background-color: #f1f8e9;
    }

    .jaw-selection {
        display: flex;
        gap: 1rem;
    }
</style>
