@page "/Department"

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inherits FoundationComponentBase

<h3>@L["Department"]</h3>

<SfGrid DataSource="@Departments" @ref="DepartmentGrid" AllowPaging="true" AllowSorting="true" Toolbar="@Toolbaritems">
    <GridEvents OnToolbarClick="OnToolbarClick" TValue="DepartmentDto"></GridEvents>
    <GridColumns>
        <GridColumn Field="Id" HeaderText="ID" IsPrimaryKey="true" Visible="false" />
        <GridColumn Field="Name" HeaderText="@L["DepartmentName"]" Width="250" />
        <GridColumn HeaderText="@L["ManageDoctor"]" Width="150">
            <Template>
                @{
                    var department = (context as DepartmentDto);
                }
                <button class="e-btn" @onclick="@(() => NavigateDoctor(department))">@L["Doctor"]</button>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="400px" ShowCloseIcon="true" Header="@DialogTitle" Visible="false">
    <DialogTemplates>
        <Content>
            <EditForm Model="@CurrentDepartment" OnValidSubmit="SaveDepartment">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">
                        @L["DepartmentName"] <span style="color: red">*</span>
                    </label>
                    <SfTextBox TValue="string" @bind-Value="CurrentDepartment.Name"
                               Placeholder="@L["EnterDepartmentName"]" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage style="color: red" For="@(() => CurrentDepartment.Name)" />
                </div>

                <div class="text-end mt-4">
                    <button type="submit" class="e-btn e-primary">@L["Save"]</button>
                    <button type="button" class="e-btn" @onclick="CloseDialog">@L["Cancel"]</button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string OrganizationId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string OrganizationName { get; set; }

    private SfGrid<DepartmentDto> DepartmentGrid;
    private SfDialog Dialog;

    private List<DepartmentDto> Departments = new();
    private CreateUpdateDepartmentDto CurrentDepartment = new();
    private string DialogTitle = "";
    private bool IsNew = true;

    private List<ItemModel> Toolbaritems = new();

    protected override async Task OnInitializedAsync()
    {
        Toolbaritems = new()
        {
            new ItemModel() { TabIndex = 0, Text = L["Add"], TooltipText = L["Add"], PrefixIcon = "e-add" },
            new ItemModel() { TabIndex = 1, Text = L["Edit"], TooltipText = L["Edit"], PrefixIcon = "e-edit" },
            new ItemModel() { TabIndex = 2, Text = L["Delete"], TooltipText = L["Delete"], PrefixIcon = "e-delete" },
            new ItemModel() { TabIndex = 3, Text = L["Refresh"], TooltipText = L["Refresh"], PrefixIcon = "e-refresh" }
        };

        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        if (!string.IsNullOrEmpty(OrganizationId))
        {
            Departments = await HttpClientFactory.CreateClient("ApiClient").GetFromJsonAsync<List<DepartmentDto>>(
               $"/api/app/department/departments-by/{OrganizationId}"
           ) ?? new();
        }
    }

    private async Task OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var selectedRow = await DepartmentGrid.GetSelectedRecordsAsync();

        switch (args.Item.TabIndex)
        {
            case 0:
                IsNew = true;
                DialogTitle = L["AddDepartment"];
                CurrentDepartment = new CreateUpdateDepartmentDto { OrganizationId = Guid.Parse(OrganizationId) };
                await Dialog.ShowAsync();
                break;

            case 1 when selectedRow.Any():
                IsNew = false;
                DialogTitle = L["EditDepartment"];
                var selected = selectedRow.First();
                CurrentDepartment = new CreateUpdateDepartmentDto
                    {
                        Id = selected.Id,
                        Name = selected.Name,
                        OrganizationId = selected.OrganizationId
                    };
                await Dialog.ShowAsync();
                break;

            case 2 when selectedRow.Any():
                await DeleteDepartment(selectedRow.First().Id);
                break;

            case 3:
                await LoadDepartments();
                break;
        }
    }

    private async Task SaveDepartment()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");

        if (IsNew)
        {
            await client.PostAsJsonAsync("/api/app/department/department", CurrentDepartment);
        }
        else
        {
            await client.PutAsJsonAsync($"/api/app/department/department/{CurrentDepartment.Id}", CurrentDepartment);
        }

        await LoadDepartments();
        await Dialog.HideAsync();
    }

    private async Task DeleteDepartment(Guid id)
    {
        await HttpClientFactory.CreateClient("ApiClient").DeleteAsync($"/api/app/department/department/{id}");
        await LoadDepartments();
    }

    private async Task CloseDialog()
    {
        await Dialog.HideAsync();
    }

    private void NavigateDoctor(DepartmentDto department)
    {
        NavigationManager.NavigateTo($"Doctor?DepartmentId={department.Id}&DepartmentName={department.Name}");
    }
}
