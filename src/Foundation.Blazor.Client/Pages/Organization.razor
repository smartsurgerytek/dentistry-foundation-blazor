@page "/Organization"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inherits FoundationComponentBase

<h3>@L["Organization"]</h3>

<SfGrid DataSource="@Organizations" @ref="OrganizationGrid" AllowPaging="true" AllowSorting="true" Toolbar="@Toolbaritems">
    <GridEvents OnToolbarClick="OnToolbarClick" TValue="OrganizationDto"></GridEvents>
    <GridColumns>
        <GridColumn Field="Id" HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
        <GridColumn Field="Name" HeaderText="Name" Width="200"></GridColumn>
        <GridColumn Field="Address" HeaderText="Address" Width="300"></GridColumn>
        <GridColumn HeaderText="Manage Department" Width="150">
            <Template>
                @{
                    var organization = (context as OrganizationDto);
                }
                <button class="e-btn" @onclick="@(() => NavigateDepartment(organization))">Department</button>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="DialogRef" Width="400px" ShowCloseIcon="true" Header="@DialogTitle" Visible="false">
    <DialogTemplates>
        <Content>
            <EditForm Model="@CurrentOrganization" OnValidSubmit="SaveOrganization">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">
                        Name <span style="color: red">*</span>
                    </label>
                    <SfTextBox TValue="string" @bind-Value="CurrentOrganization.Name"
                    Placeholder="Enter Name" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage style="color: red" For="@(() => CurrentOrganization.Name)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">
                        Address <span style="color: red">*</span>
                    </label>
                    <SfTextBox TValue="string" @bind-Value="CurrentOrganization.Address"
                    Placeholder="Enter Address" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage style="color: red" For="@(() => CurrentOrganization.Address)" />
                </div>

                <div class="mt-4 text-end">
                    <button type="submit" class="e-btn e-primary">Save</button>
                    <button type="button" class="e-btn" @onclick="CloseDialog">Cancel</button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>


@code {
    private SfGrid<OrganizationDto> OrganizationGrid;
    private SfDialog DialogRef;
    private List<OrganizationDto> Organizations = new();
    private CreateUpdateOrganizationDto CurrentOrganization = new();
    private string DialogTitle = "";
    private bool IsNew = true;

    private List<ItemModel> Toolbaritems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrganizations();
        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete", PrefixIcon = "e-delete" });
        Toolbaritems.Add(new ItemModel() { Text = "Refresh", TooltipText = "Refresh", PrefixIcon = "e-refresh" });
    }

    private async Task LoadOrganizations()
    {
        Organizations = await HttpClientFactory.CreateClient("ApiClient").GetFromJsonAsync<List<OrganizationDto>>("api/app/organization/organizations");
    }

    private async Task OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var selectedRow = await OrganizationGrid.GetSelectedRecordsAsync();

        if (args.Item.Text == "Add")
        {
            IsNew = true;
            DialogTitle = "Add Organization";
            CurrentOrganization = new CreateUpdateOrganizationDto();
            await DialogRef.ShowAsync();
        }
        else if (args.Item.Text == "Edit" && selectedRow.Count > 0)
        {
            IsNew = false;
            DialogTitle = "Edit Organization";
            var selected = selectedRow.First();
            CurrentOrganization = new CreateUpdateOrganizationDto
                {
                    Id = selected.Id,
                    Name = selected.Name,
                    Address = selected.Address
                };
            await DialogRef.ShowAsync();
        }
        else if (args.Item.Text == "Delete" && selectedRow.Count > 0)
        {
            await DeleteOrganization(selectedRow.First().Id);
        }
        else if (args.Item.Text == "Refresh")
        {
            await LoadOrganizations();
        }
    }

    private async Task SaveOrganization()
    {
        if (IsNew)
        {
            await HttpClientFactory.CreateClient("ApiClient").PostAsJsonAsync("/api/app/organization/organization", CurrentOrganization);
        }
        else
        {
            await HttpClientFactory.CreateClient("ApiClient").PutAsJsonAsync($"/api/app/organization/organization/{CurrentOrganization.Id}", CurrentOrganization);
        }

        await LoadOrganizations();
        await DialogRef.HideAsync();
    }

    private async Task DeleteOrganization(Guid id)
    {
        await HttpClientFactory.CreateClient("ApiClient").DeleteAsync($"/api/app/organization/organization/{id}");
        await LoadOrganizations();
    }

    private async Task CloseDialog()
    {
        await DialogRef.HideAsync();
    }

    private void NavigateDepartment(OrganizationDto organizationDto)
    {
        NavigationManager.NavigateTo($"Department?OrganizationId={organizationDto.Id}");
    }
}
